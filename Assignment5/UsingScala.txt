Question 1:
-----------

val dataset=sc.textFile("/yelpdatafall/business/business.csv").map(line=>line.split("\\^"))

#map the business id(as key) with full address and category
val dataset1=dataset.map(line=>(line(0),line(1).toString+line(2).toString))
val dataset2=sc.textFile("/yelpdatafall/review/review.csv").map(line=>line.split("\\^"))

#map business id from review.csv with the individual rating and reduce it by the business id key
val sumofstars=dataset2.map(line=>(line(2),line(3).toDouble)).reduceByKey((a,b)=>a+b).distinct

#obtain count of every business id
val count=dataset2.map(line=>(line(2),1)).reduceByKey((a,b)=>a+b).distinct

#results in (business id,(sum,count))
val sumandcount=sumofstars.join(count)  

#perform average for every business id
val review=sumandcount.map(a=>(a._1,a._2._1/a._2._2)) 

#join results in (business id,(full address,category,average))
val res=dataset1.join(review).distinct.collect()

#sort the table acording to the average values
val sortedres=res.sortWith(_._2._2>_._2._2).take(10)
sortedres.foreach(line=>println(line._1,line._2._1,line._2._2))

-------------------------------------------------------------------------------------------------------------------------------

Question 2:
-----------

val dataset3=sc.textFile("/yelpdatafall/user/user.csv").map(line=>line.split("\\^"))
val datasetrev=sc.textFile("/yelpdatafall/review/review.csv").map(line=>line.split("\\^"))

val sumofstars=datasetrev.map(line=>(line(1),line(3).toDouble)).reduceByKey((a,b)=>a+b).distinct

val count=datasetrev.map(line=>(line(1),1)).reduceByKey((a,b)=>a+b).distinct

#join userid, sum column and count column
val sumandcount=sumofstars.join(count)

#userid->avg rating
val review=sumandcount.map(a=>(a._1,a._2._1/a._2._2))

#To read the username type the below command, and then type user name , after you're done press enter
val a=Console.readLine()

#userid that contains John H that is stored in a
val check=dataset3.filter(line=>line(1).contains(a)).map(line=>(line(0).toString,line(1).toString))

#userid-> name
val userData=dataset3.map(line=>(line(0).toString,line(1).toString))

val res=review.join(userData)

val finalres=res.join(check)

#Print final result
finalres.foreach(line=>println(line._1,line._2._2._1,line._2._2._2))

--------------------------------------------------------------------------------------------------------------------------------

Question 3:
-----------
val dataset=sc.textFile("/yelpdatafall/business/business.csv").map(line=>line.split("\\^"))

#filter based on Standford
val filter=dataset.filter(line=>line(1).contains("Stanford")).map(line=>(line(0).toString,line(1).toString))
val dataset2=sc.textFile("/yelpdatafall/review/review.csv").map(line=>line.split("\\^"))
val jtable = dataset2.map(line=>(line(2).toString,(line(1).toString,line(3).toDouble)))

val res=jtable.join(filter)
res.foreach(line=>println(line._2._1))

---------------------------------------------------------------------------------------------------------------------------------

Question 4:
-----------

val dataset=sc.textFile("/yelpdatafall/user/user.csv").map(line=>line.split("\\^"))
val dataset1=dataset.map(line=>(line(0),line(1).toString))
val dataset2=sc.textFile("/yelpdatafall/review/review.csv").map(line=>line.split("\\^"))
val count=dataset2.map(line=>(line(1),1)).reduceByKey((a,b)=>a+b).distinct

val joinres=dataset1.join(count).distinct.collect()

#sort in decreasing order
val sortedres=joinres.sortWith(_._2._2>_._2._2).take(10)
sortedres.foreach(line=>println(line._1,line._2._1,line._2._2))

---------------------------------------------------------------------------------------------------------------------------------

Question 5:
-----------

val dataset=sc.textFile("/yelpdatafall/business/business.csv").map(line=>line.split("\\^"))
val filter=dataset.filter(line=>line(1).contains("TX")).map(line=>(line(0).toString,line(1).toString))
val dataset2=sc.textFile("/yelpdatafall/review/review.csv").map(line=>line.split("\\^"))
val count=dataset2.map(line=>(line(2),1)).reduceByKey((a,b)=>a+b)

val joinres=filter.join(count)
joinres.foreach(line=>println(line._1,line._2._2))

---------------------------------------------------------------------------------------------------------------------------------
